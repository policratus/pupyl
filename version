#!/usr/bin/env python3
"""Updates pupyl version."""
import re
import argparse
from os.path import join

from termcolor import cprint


with open('.version', 'rt') as VERSION_READ:
    CURRENT_VERSION = VERSION_READ.read()

PARSER = argparse.ArgumentParser(
    prog='Pupyl version updater.',
    description='Updates pupyl version on entire library.'
)

PARSER.add_argument(
    'version',
    metavar='version',
    type=str,
    nargs=1,
    help='Updates the current version of pupyl throughout the library.'
)

PARSER.add_argument(
    '--patch',
    help='Defines it as a patch update.',
    action='store_true'
)

PARSER.add_argument(
    '--minor',
    help='Defines it as a minor update.',
    action='store_true'
)

PARSER.add_argument(
    '--major',
    help='Defines it as a major update.',
    action='store_true'
)

ARGUMENTS = PARSER.parse_args()

VERSION = ARGUMENTS.version[0]

SUITABLE_VERSION = CURRENT_VERSION.split('.')


if ARGUMENTS.patch:
    COMPARISON_VERSION = '.'.join(
        [
            SUITABLE_VERSION[0][1:],
            SUITABLE_VERSION[1],
            str(int(SUITABLE_VERSION[2]) + 1)
        ]
    )
elif ARGUMENTS.minor:
    COMPARISON_VERSION = '.'.join(
        [
            SUITABLE_VERSION[0][1:],
            str(int(SUITABLE_VERSION[1]) + 1),
            '0'
        ]
    )
elif ARGUMENTS.major:
    COMPARISON_VERSION = '.'.join(
        [
            str(int(SUITABLE_VERSION[0][1:]) + 1),
            '0',
            '0'
        ]
    )


if VERSION == COMPARISON_VERSION:
    with open(join('pupyl', 'search.py')) as MAIN_MODULE, \
            open('setup.py') as SETUP_MODULE, \
            open(join('conda', 'meta.yaml')) as CONDA_META, \
            open(join('docs', 'source', 'conf.py')) as DOCS:

        FILE_MODULE = MAIN_MODULE.read()
        SETUP_FILE = SETUP_MODULE.read()
        CONDA_FILE = CONDA_META.read()
        DOCS_CONF_FILE = DOCS.read()

        NEW_VERSION = f"__version__ = 'v{VERSION}'"

        MAIN_MODULE_MODIFIED = re.sub(
            r'^.*\b(\w*__version__\w*)\b.*',
            NEW_VERSION,
            FILE_MODULE,
            flags=re.MULTILINE
        )

        SETUP_MODULE_MODIFIED = re.sub(
            r'^.*\b(\w*version\w*)\b.*',
            f'    version="{VERSION.replace("rc", "rc0")}",',
            SETUP_FILE,
            flags=re.MULTILINE
        )

        CONDA_META_MODIFIED = re.sub(
            r'^.*\b(\w*\sversion\w*)\b.*',
            '{% set version = "' + f'{VERSION}' + '"%}',
            CONDA_FILE,
            flags=re.MULTILINE
        )

        DOCS_CONF_FILE_MODIFIED = re.sub(
            r'^.*\b(\w*release\w*)\b.*',
            f"release = '{VERSION}'",
            DOCS_CONF_FILE,
            flags=re.MULTILINE
        )

    with open(join('pupyl', 'search.py'), 'w') as MAIN_MODULE, \
            open('setup.py', 'w') as SETUP_MODULE, \
            open(join('conda', 'meta.yaml'), 'w') as CONDA_META, \
            open(join('docs', 'source', 'conf.py'), 'w') as DOCS, \
            open('.version', 'w') as VERSION_FILE:
        MAIN_MODULE.write(MAIN_MODULE_MODIFIED)
        SETUP_MODULE.write(SETUP_MODULE_MODIFIED)
        CONDA_META.write(CONDA_META_MODIFIED)
        DOCS.write(DOCS_CONF_FILE_MODIFIED)
        VERSION_FILE.write(f'v{VERSION}')

    cprint(f'Version updated to {VERSION}', 'blue')
else:
    cprint(
        f"Version {VERSION} is not valid with "
        f'next version {COMPARISON_VERSION}',
        'red'
    )
